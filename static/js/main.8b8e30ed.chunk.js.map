{"version":3,"sources":["Auth.js","NavBar/NavBar.js","Posts/Posts.js","Post/SubmitComment.js","Post/Post.js","Callback.js","SecuredRoute/SecuredRoute.js","NewPost/NewPost.js","App.js","serviceWorker.js","index.js"],"names":["auth0Client","Auth","Object","classCallCheck","this","auth0","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","profile","idToken","Date","getTime","expiresAt","authorize","_this","Promise","resolve","reject","parseHash","err","authResult","idTokenPayload","exp","withRouter","props","react_default","a","createElement","className","Link","to","onClick","name","history","replace","Posts","possibleConstructorReturn","getPrototypeOf","call","state","posts","axios","get","data","setState","map","post","key","id","concat","comments","title","content","Component","SubmitComment","comment","value","submitComment","_this2","react","htmlFor","type","onChange","e","updateComment","target","placeholder","answer","submit","Post","assertThisInitialized","refreshPost","params","match","postId","headers","Authorization","getIdToken","Post_SubmitComment","idx","Callback","SecuredRoute","component","path","Route","render","NewPost","disabled","description","push","onBlur","updateTitle","updateContent","App","NavBar_NavBar","exact","SecuredRoute_SecuredRoute","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b8e30ed.chunk.js","sourcesContent":["// TODO: Comment and document Auth class \nimport auth0 from 'auth0-js';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // the following three lines MUST be updated\n      domain: 'enming.auth0.com',\n      audience: 'https://enming.auth0.com/userinfo',\n      clientID: '9EgWOUQPXNQ0h9Q59kB3c9xRa7Vyysv3',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'id_token',\n      scope: 'openid profile'\n    });\n\n    this.getProfile = this.getProfile.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  getProfile() {\n    return this.profile;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  isAuthenticated() {\n    return new Date().getTime() < this.expiresAt;\n  }\n\n  signIn() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n        this.idToken = authResult.idToken;\n        this.profile = authResult.idTokenPayload;\n        // set the time that the id token will expire at\n        this.expiresAt = authResult.idTokenPayload.exp * 1000;\n        resolve();\n      });\n    })\n  }\n\n  signOut() {\n    // clear id token, profile, and expiration\n    this.idToken = null;\n    this.profile = null;\n    this.expiresAt = null;\n  }\n}\n\nconst auth0Client = new Auth();\n\nexport default auth0Client;","import React from 'react';\n// withRouter: component with navigation capabilities\nimport {Link, withRouter} from 'react-router-dom';\n// our singleton instance of the Auth class\nimport auth0Client from '../Auth'\n\nfunction NavBar(props) {\n    const signOut = () => {\n        auth0Client.signOut();\n        props.history.replace('/');\n    };\n\n    return (\n        <nav className=\"navbar navbar-dark bg-primary fixed-top\">\n            <Link className=\"navbar-brand\" to=\"/\">\n                Bill's Project Corner!\n            </Link>\n            {\n                !auth0Client.isAuthenticated() && // when user is unauthenticated\n                <button className=\"btn btn-dark\" onClick={auth0Client.signIn}>Sign In</button>\n            }\n            {\n                auth0Client.isAuthenticated() && // when user is already authenticated\n                <div>\n                    <label className=\"mr-2 text-white\">{auth0Client.getProfile().name}</label>\n                    <button className=\"btn btn-dark\" onClick={ () => { signOut() } }>Sign Out</button>\n                </div>\n            }\n        </nav>\n    )\n}\n\nexport default withRouter(NavBar);","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\n\nclass Posts extends Component {\n    constructor(props) {\n        super(props);\n        // Initialize posts property to null upon construction\n        this.state = {\n            posts: null,\n        };\n    }\n\n    // async trigger after successful component mount\n    async componentDidMount() {\n        // issue GET request to express.js backend\n        const posts = (await axios.get('http://localhost:8081/')).data;\n        this.setState({\n            posts,\n        });\n    }\n\n    // renders 'loading posts ...' between construction and mounting\n    // upon response from backend, put data into a const posts, which we update the HTML with\n    // uses Link from react-router-dom to redirect users to the following path:'/post/${post.id}'\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Link to=\"/new-post\">\n                        <div className=\"card text-white bg-secondary mb-3\">\n                            <div className=\"card-header\">Make a new post!</div>\n                            <div className=\"card-body\">\n                                <h4 className=\"card-title\">+ New Post</h4>\n                                <p className=\"card-text\">Share your project with everyone!</p>\n                            </div>\n                        </div>\n                    </Link>\n                    {this.state.posts === null && <p>Loading posts...</p>}\n                    {\n                        this.state.posts && this.state.posts.map(post => (\n                            <div key={post.id} className=\"col-sm-12 col-md-4 col-lg-3\">\n                                <Link to={`/post/${post.id}`}>\n                                    <div className=\"card text-white bg-success mb-3\">\n                                        <div className=\"card-header\">Comments: {post.comments}</div>\n                                        <div className=\"card-body\">\n                                            <h4 className=\"card-title\">{post.title}</h4>\n                                            <p className=\"card-text\">{post.content}</p>\n                                        </div>\n                                    </div>\n                                </Link>\n                            </div>\n\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Posts;","import React, {Component, Fragment} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport auth0Client from '../Auth';\n\nclass SubmitComment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comment: '',\n    };\n  }\n\n  updateComment(value) {\n    this.setState({\n      comment: value,\n    });\n  }\n\n  submit() {\n    this.props.submitComment(this.state.comment);\n\n    this.setState({\n      comment: '',\n    });\n  }\n\n  render() {\n    if (!auth0Client.isAuthenticated()) return null;\n    return (\n      <Fragment>\n        <div className=\"form-group text-center\">\n          <label htmlFor=\"exampleInputEmail1\">Comment:</label>\n          <input\n            type=\"text\"\n            onChange={(e) => {this.updateComment(e.target.value)}}\n            className=\"form-control\"\n            placeholder=\"Share your comment.\"\n            value={this.state.answer}\n          />\n        </div>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {this.submit()}}>\n          Submit\n        </button>\n        <hr className=\"my-4\" />\n      </Fragment>\n    )\n  }\n}\n\nexport default withRouter(SubmitComment);","import React, {Component} from 'react';\nimport axios from 'axios';\nimport SubmitComment from './SubmitComment';\nimport auth0Client from '../Auth';\n\n// Stateful component that uses Axios to issue a GET request to the endpoint that retrieves the whole details of a post\n// and that updates the page whenever it gets a response back.\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            post: null,\n        };\n    \n        this.submitComment = this.submitComment.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.refreshPost();\n    }\n\n    async refreshPost() {\n        const { match: { params } } = this.props;\n        const post = (await axios.get(`http://localhost:8081/${params.postId}`)).data;\n        this.setState({\n            post,\n        });\n    }\n\n    async submitComment(comment) {\n        await axios.post(`http://localhost:8081/comment/${this.state.post.id}`, {\n            comment,\n        }, {\n            headers: { 'Authorization': `Bearer ${auth0Client.getIdToken()}` }\n        });\n        await this.refreshPost();\n    }\n\n    // renders post details and all comments attached to post \n    render() {\n        const {post} = this.state;\n        if (post === null) return <p>Loading ...</p>;\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"jumbotron col-12\">\n                        <h1 className=\"display-3\">{post.title}</h1>\n                        <p className=\"lead\">{post.content}</p>\n                        <hr className=\"my-4\"/>\n                        <SubmitComment postId={post.id} submitComment={this.submitComment} />\n                        <p>Comments:</p>\n                        {\n                            post.comments.map((comment, idx) => (\n                                <p className=\"lead\" key={idx}>{comment.comment}</p>\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Post;","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport auth0Client from './Auth';\n\nclass Callback extends Component {\n    async componentDidMount() {\n        // fetches user info sent by Auth0\n        await auth0Client.handleAuthentication();\n        // redirects user to home page after authentication\n        this.props.history.replace('/');\n    }\n\n    render() {\n        return (\n            // renders loading message \n            <p>Loading profile...</p>\n        );\n    }\n}\n\nexport default withRouter(Callback);","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport auth0Client from '../Auth';\n\nfunction SecuredRoute(props) {\n    const {component: Component, path} = props;\n    return (\n        <Route path={path} render={ () => {\n            if (!auth0Client.isAuthenticated()) {\n                auth0Client.signIn();\n                return <div></div>;\n            }\n            return <Component />\n        } } />\n    );\n}\n\nexport default SecuredRoute;","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport auth0Client from '../Auth';\nimport axios from 'axios';\n\nclass NewPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      disabled: false,\n      title: '',\n      content: '',\n    };\n  }\n\n  updateContent(value) {\n    this.setState({\n      content: value,\n    });\n  }\n\n  updateTitle(value) {\n    this.setState({\n      title: value,\n    });\n  }\n\n  async submit() {\n    this.setState({\n      disabled: true,\n    });\n\n    await axios.post('http://localhost:8081', {\n      title: this.state.title,\n      content: this.state.description,\n    }, {\n      headers: { 'Authorization': `Bearer ${auth0Client.getIdToken()}` }\n    });\n\n    this.props.history.push('/');\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"card border-primary\">\n              <div className=\"card-header\">New Post</div>\n              <div className=\"card-body text-left\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputEmail1\">Title:</label>\n                  <input\n                    disabled={this.state.disabled}\n                    type=\"text\"\n                    onBlur={(e) => {this.updateTitle(e.target.value)}}\n                    className=\"form-control\"\n                    placeholder=\"Give your question a title.\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputEmail1\">Content:</label>\n                  <input\n                    disabled={this.state.disabled}\n                    type=\"text\"\n                    onBlur={(e) => {this.updateContent(e.target.value)}}\n                    className=\"form-control\"\n                    placeholder=\"Give more context to your post.\"\n                  />\n                </div>\n                <button\n                  disabled={this.state.disabled}\n                  className=\"btn btn-primary\"\n                  onClick={() => {this.submit()}}>\n                  Submit\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(NewPost);","import React, { Component } from 'react';\nimport {Route} from 'react-router-dom';\nimport NavBar from './NavBar/NavBar';\nimport Posts from './Posts/Posts';\nimport Post from './Post/Post';\nimport Callback from './Callback';\nimport SecuredRoute from './SecuredRoute/SecuredRoute';\nimport NewPost from './NewPost/NewPost';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar/>\n        <Route exact path='/' component={Posts}/>\n        <Route exact path='/post/:postId' component={Post}/>\n        <Route exact path='/callback' component={Callback}/>\n        <SecuredRoute path='/new-post' component={NewPost}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}